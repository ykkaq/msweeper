1 テーマ
  マインスイーパに似たゲームである，M スイーパを作る．

2 M スイーパのルール
  M スイーパは，M ボード上に隠れている M を捜し出すゲームである．
  M ボードは，下のように 8×8 のます目になっている．それぞれの点には，M があるかまたは M がない．ゲーム開始時には，この情報は隠されている．

	  0 1 2 3 4 5 6 7
	0 . . . . . . . .
	1 . . . . . . . .
	2 . . . . . . . .
	3 . . . . . . . .
	4 . . . . . . . .
	5 . . . . . . . .
	6 . . . . . . . .
	7 . . . . . . . .

  プレイヤは，ボード上の任意の点を“開く”ことができる．ある点Pを“開く”と次のいずれかが起こる．

    ・PにMが隠されていたとき…ゲームオーバ
	・PにMがないとき		…Pの周囲の点に隠されている M の数が公開される

  ただし，ここで P の周囲の点とは，下の図の Q0〜Q7 の位置関係にある 8 点である．P が辺（たとえば (0,4)）または隅（たとえば (0,0)）にあって，Q がボードの外にはみだすときには，その Q は周囲の点に含まれない．

	Q0 Q1 Q2
	Q3  P Q4
	Q5 Q6 Q7

  例として，(1,2)，(3,3)，(5,4) に M があるときに，(4,4) を開いたとする．(4,4) には M がないので，(4,4) の周囲の M の数 = 2 が公開される．

	  0 1 2 3 4 5 6 7
	0 . . . . . . . .
	1 . . . . . . . .
	2 . . . . . . . .
	3 . . . . . . . .
	4 . . . . 2 . . .
	5 . . . . . . . .
	6 . . . . . . . .
	7 . . . . . . . .

  M のある点を開かずに，すべての安全な点を開くことができたら，ゲームクリアである．M のある点を開いてしまったら，ゲームオーバとなる．

3 発展課題
  サンプルの msweeper は，Windows のマインスイーパと比較して，次の機能が欠けている．これらを補うように，プログラムを拡張せよ．

    (1) ボードの大きさや M の個数をプレイヤが選択できる
    (2) 時間を測る
    (3) ハイスコアを記録する
    (4) 明らかに M がない点を自動的に開く（参考：msweeper2）
    (5) Mマークの数と実際の M の数が一致する点の周囲を，半自動で開く
        （ただし，M の位置が間違っていたらゲームオーバになる）
    (6) M があるかどうかわからない点に，プレイヤが ? マークを付けられる

さらに，機能ではなく操作性を向上させる改良として，

    (7) curses ライブラリを利用する（参考：testcurses.c）

  拡張部分は，評価に加点する．

4 レポート
  下の (1)〜(4)を含むレポートを提出しなさい．レポートの締め切りは，

    *** 6/25（火） 8:49 ***

である．提出先は，

  学籍番号が奇数→大枝
            偶数→丸山

とする．

※節は，下の(1)〜(4)に対応させるのではなく，自分のレポートに合わせて構成する

(1) プログラムの仕様（外部仕様，内部仕様）
      ・プログラムの機能
      ・プログラムの使い方
      ・主要なデータ構造
      ・各関数の仕様（引数，戻り値，処理内容）

(2) プログラムの正しさの検証
      たとえば：
      ・ゲームクリア，ゲームオーバの処理が正しく行なわれていることの確認
      ・想定外の文字を入力されても破綻しないことの確認

(3) 問題点など
      ・設計，コーディングの過程で分かった問題点と，それに対する改善案
          効率，プログラムの分かりやすさ，機能を拡張する場合の容易さなど

(4) 付録としてプログラムリスト
      ・適切なコメントを含むこと
      ・インデントをつけるなど，読みやすさに配慮すること
      ・2段組フォーマットが望ましい（紙資源を大切にしよう）

    *** プログラムは，レポートとは別に電子メールでも提出すること ***

※プログラムに関する制約

・原則として，グローバル変数を用いてはならない．
  もしあえて使う場合は，
    グローバル変数にしなくてはならない理由，または
    グローバル変数にした方がすぐれたプログラムになる理由
  を示しなさい．
・少なくとも 10 個以上の関数を作らなくてはならない．
・原則として 40 行以上の関数を作ってはならない．
  もしこの制約を守れない関数がある場合，
    これ以上処理を分割できない理由，または
    分割しない方がすぐれたプログラムになる理由
  を示しなさい．

